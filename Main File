#include <iostream>
#include <string.h>
#include <string>
#include <cstring>
#include <cctype>
#include <cstdio>
#include<stdio.h>
#include<ctype.h>
using namespace std;

const int MAX_NO_OF_ROWS = 11;
const int MAX_NO_OF_COLS = 15;

void drawBoard(int ,int , string[][MAX_NO_OF_COLS]);
bool checkName(string);
void formatName(string);
string setfirstname(string);
int convertRowMove(string);
int convertColMove(string);
bool gameResultWin(int, int, string[][MAX_NO_OF_COLS], int, int);


struct database {
		string fullname;
		string firstName;
		int gamesplayed = 0;
		int wins = 0;
		int loss = 0;
		int draw = 0;
		char piece;
  };

int main()
{
  char playAgain;
  string dummyspace;
  int gamecounter = 0;
  int numofppl    = 0;
  int whoWon      = 0;
  int whoStarts   = 0;
  string playersfullname[numofppl];
	char letters[7] = { 'a','b','c','d','e','f','g' };
	database players[7];

	cout << "How many people are playing? (Min:2,Max:7)" << endl;
	cin >> numofppl;
  getline(cin,dummyspace);

  while (numofppl > 7 || numofppl < 2)
  {

    cout << "Invalid response" << endl;
    cout << "How many people are playing? (Min:2,Max:7)" << endl;
	  cin >> numofppl;
    
  }

	for (int i = 1; i <= numofppl; i++)
  {

		players[i].piece = letters[i - 1];
	}

	for (int i = 1; i <= numofppl; i ++)
  {
    
      cout << "Enter your first and last name Player(" << players[whoStarts + i].piece << ") ";
      getline(cin,players[whoStarts + i].fullname);
      

        while (checkName(players[whoStarts + i].fullname) == false)
        {

          int length = players[whoStarts + i].fullname.length();
          string newstring = "";
          cout << "Invalid name! Only use letters." << endl;
          cout << "Try again." << endl;
          getline(cin,newstring);
          players[whoStarts + i].fullname.replace(0,length,newstring);
      }
	}

  
	for (int i =1; i <= numofppl;i++)
  {

    players[whoStarts + i].firstName = setfirstname(players[whoStarts + i].fullname);
    
  }
	
	
	
	do {
		
		int rows, columns = 0;
		bool dimenvalid = true;
    
    string spaces[MAX_NO_OF_ROWS][MAX_NO_OF_COLS];
		
    for (int i = 0; i < 11; i++)
    {

      for (int j = 0; j< 15; j++)
      {
        
        spaces[i][j] = " ";
      }
    }
    
		while (dimenvalid)
    {

			dimenvalid = false;
			cout << "\nPlease enter the dimension of the board. (Min: 3 x 3, Max: 11 x 15) \n";
			cout << "Enter the number of rows -> ";
			cin >> rows; cout << endl;
			cout << "Enter the number of columns -> ";
			cin >> columns; cout << endl;

			if ((rows < 3 || columns > 15))
      {

				cout << "Invalid dimensions!" << endl;
				dimenvalid = true;
			}
      
			drawBoard(rows, columns, spaces);

		}
    bool gameOver = false;
    while(gameOver == false){

      for (int i = 1; i <= numofppl; i++)
      {
        string move;
        formatName(players[whoStarts + i].firstName);
        cout << " (" << players[whoStarts + i].piece << ")" << ", enter your move -> " << endl;
        cin >> move;

        int rowindex = convertRowMove(move);
        int colindex = convertColMove(move);
        cout << rowindex << " " << colindex << endl;
        spaces[colindex - 1][rowindex] = players[whoStarts + i].piece;
        drawBoard(rows, columns, spaces);

        int countspaces = 0;

        bool gameWinner = gameResultWin(colindex-1, rowindex, spaces, rows, columns);

        if (!gameWinner)
        {

          for (int r = 0; r <= rows; r++)
          {
            
            for (int c = 0; c <= columns; c++)
            {

              if (spaces[c][r]== " ")
              {

                countspaces += 1;
              } 
            }
          }
          if (countspaces == 0)
          {

            gamecounter += 1;
            for (int i = 1; i <= numofppl; i++)
            {

              players[whoStarts + i].draw += 1;
            }
            if (whoStarts + i == numofppl)
            {

              whoStarts = 1;
              whoWon = numofppl;
           }
           else
           {
            
              whoWon = whoStarts + i;
              whoStarts = whoWon + 1;
          }
            gameOver = true;
            break;
          
        }
        else
        {

          if (whoStarts + i == numofppl)
          {

            whoStarts = 1;
            whoWon = numofppl;
          }else
          {

            whoWon = whoStarts + i;
            whoStarts = whoWon + 1;
          }
          cout << players[whoStarts + i].firstName << ", congratulations! You won you sly dawg." << endl;
        }
      }
     if (i == numofppl)
     {

       i = 1;
     }
    }
     cout << "Would you like to play another game? (Y/N)" << endl;
     cin >> playAgain;
   }
  }while (playAgain == 'y'||'Y');
  
}

bool gameResultWin(int col, int row, string spaces[][15],
                   int rowSize, int colSize)
{
  char winspaces;
  if ((spaces[row][col] == spaces[row][col + 1] &&
       spaces[row][col + 1] == spaces[row][col + 2]))
  {
      winspaces = spaces[row][col][0] -= 32;
      spaces[row][col]     = winspaces;
      spaces[row][col + 1] = winspaces;
      spaces[row][col + 2] = winspaces;
      drawBoard(rowSize, colSize, spaces);
      return  true;
  }
  else if ((spaces[row][col] == spaces[row][col - 1]) &&
           (spaces[row][col - 1] == spaces[row][col - 2]))
  {
      winspaces = spaces[row][col][0] -= 32;
      spaces[row][col]     = winspaces;
      spaces[row][col - 1] = winspaces;
      spaces[row][col - 2] = winspaces;
      drawBoard(rowSize, colSize, spaces);
      return true;
  }
  else if ((spaces[row][col] == spaces[row - 1][col]) && 
          (spaces[row - 1][col] == spaces[row - 2][col]))
  {
      winspaces = spaces[row][col][0] -= 32;
      spaces[row][col]     = winspaces;
      spaces[row - 1][col] = winspaces;
      spaces[row - 2][col] = winspaces;
      drawBoard(rowSize, colSize, spaces);
      return true;
  }
  else if (((spaces[row][col] == spaces[row + 1][col]) &&
            (spaces[row + 1][col] == spaces[row + 2][col])))
  {
      winspaces = spaces[row][col][0] -= 32;
      spaces[row][col]     = winspaces;
      spaces[row + 1][col] = winspaces;
      spaces[row + 2][col] = winspaces;
      drawBoard(rowSize, colSize, spaces);
      return true;
  }
  else if ((spaces[row][col] == spaces[row - 1][col - 1]) &&
           (spaces[row - 1][col - 1] == spaces[row - 2][col - 2]))
  {
    winspaces = spaces[row][col][0] -= 32;
    spaces[row][col]         = winspaces;
    spaces[row - 1][col - 1] = winspaces;
    spaces[row - 2][col - 2] = winspaces;
    drawBoard(rowSize, colSize, spaces);
    return true;
  }
  else if ((spaces[row][col] == spaces[row + 1][col + 1]) &&
           (spaces[row + 1][col + 1] == spaces[row + 2][col + 2]))
  {
    winspaces = spaces[row][col][0] -= 32;
    spaces[row][col]         = winspaces;
    spaces[row + 1][col + 1] = winspaces;
    spaces[row + 2][col + 2] = winspaces;
    drawBoard(rowSize, colSize, spaces);
    return true;
  }
  else if ((spaces[row][col] == spaces[row - 1][col + 1]) &&
           (spaces[row - 1][col + 1] == spaces[row - 2][col + 2]))
  {
    winspaces = spaces[row][col][0] -= 32;
    spaces[row][col]         = winspaces;
    spaces[row - 1][col + 1] = winspaces;
    spaces[row - 2][col + 2] = winspaces;
    drawBoard(rowSize, colSize, spaces);
    return true;
  }
  else if ((spaces[row][col] == spaces[row + 1][col - 1]) &&
           (spaces[row + 1][col - 1] == spaces[row + 2][col - 2]))
  {
    winspaces = spaces[row][col][0] -= 32;
    spaces[row][col]         = winspaces;
    spaces[row + 1][col - 1] = winspaces;
    spaces[row + 2][col - 2] = winspaces;
    drawBoard(rowSize, colSize, spaces);
    return true;
  }
  return false;
  
  
} 

int convertRowMove(string move)
{

  if (move.length()==2||3)
  {
    
    if ((isalpha(move[0])) && (isdigit(move[1])))
    {

      int rowmove =0; 
      int columnmove = stoi(move.substr(1));
      char x = tolower(move[0]);
      rowmove = (x - 97);
      return rowmove;
    }
  }
  return 0;
}

int convertColMove(string move)
{

  if (move.length()==2||3)
  {

    if ((isalpha(move[0])) && (isdigit(move[1])))
    {

      int columnmove = stoi(move.substr(1));
      return columnmove;
    }
  }
  return 0;
}


string setfirstname(string fullname)
{
  string firstname;
  for (int i=0;i<= fullname.length();i++)
    {
      if (isspace(fullname[i]))
      {
        firstname = fullname.substr(0,i);
        break;
      }
    }
    return firstname;
}


void formatName(string name)
{
  
  for (int i =0; i <= name.length() -1;i++)
  {

    if (i ==0)
    {

      putchar(toupper(name[i]));
    }
    else
    {

      putchar(tolower(name[i]));
    }
  }
}


bool checkName(string name)
{

  for (int i= 0; i< name.length()-1; i++)
  {

    if (!(isalpha(name[i]) || isspace(name[i])))
    {

      return false;
    }
  }
  return true;
} 


void drawBoard(int rows, int columns, string spaces[][15])
{

	cout << "    ";

	for (int i = 0; i <= columns-1; i++)
  {

     if (i < 9)
     {

       cout << i +1 << "   ";
     }
     else
    {
       
       cout << i +1 << "  ";
    }
  }


	for (int i = 0; i < rows; i++) 
  {
      cout << "   ";
      
      cout << endl;

      char alpha = i + 65;
      cout << "   ";
      for (int j=0; j<columns;j++)
      {

        cout << "---" << " ";
      }
      cout << endl;
      cout << alpha << " ";
      for (int j = 0 ; j<columns; j++)
      {
        cout << "| " << spaces[j][i] << " " ;
      }
      cout << "| " << alpha;
      
  }
     cout << endl;
     cout << "   ";
      for (int j =0 ; j < columns;j++)
      {

        cout << "---" << " ";
      }
	   cout << endl;
     cout << "    ";
     for (int i = 0; i <= columns - 1; i++)
     {

     if (i < 9)
     {

       cout << i + 1 << "   ";
     }
     else
    {
       
       cout << i + 1 << "  ";
    }
  }  
  cout << endl;
}
